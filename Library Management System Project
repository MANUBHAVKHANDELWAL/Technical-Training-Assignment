import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.util.ArrayList;
import java.util.List;

public class LibraryManagementSystem {
    private static Library library = new Library();

    public static void main(String[] args) {
        // Add predefined books to the library
        addPredefinedBooks(library);

        // Prompt user to choose between console or GUI mode
        String[] options = {"Console", "GUI"};
        int choice = JOptionPane.showOptionDialog(null, "Choose mode:", "Library Management System",
                JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, null, options, options[0]);

        if (choice == 0) {
            // Console mode
            consoleMode();
        } else if (choice == 1) {
            // GUI mode
            guiMode();
        } else {
            JOptionPane.showMessageDialog(null, "Invalid choice. Exiting...");
        }
    }

    private static void consoleMode() {
        // Display a welcome message
        System.out.println("Welcome to the Library Management System!");

        // Main loop for console mode
        while (true) {
            System.out.println("\nChoose an option:");
            System.out.println("1. Add Book");
            System.out.println("2. Remove Book");
            System.out.println("3. Search Book");
            System.out.println("4. List All Books");
            System.out.println("5. Borrow Book");
            System.out.println("6. Return Book");
            System.out.println("7. Exit");

            int choice = Integer.parseInt(JOptionPane.showInputDialog("Enter your choice:"));

            switch (choice) {
                case 1:
                    // Code to add a book
                    addBook();
                    break;
                case 2:
                    // Code to remove a book
                    removeBook();
                    break;
                case 3:
                    // Code to search for a book
                    searchBook();
                    break;
                case 4:
                    // Code to list all books
                    listAllBooks();
                    break;
                case 5:
                    // Code to borrow a book
                    borrowBook();
                    break;
                case 6:
                    // Code to return a book
                    returnBook();
                    break;
                case 7:
                    JOptionPane.showMessageDialog(null, "Exiting...");
                    System.exit(0);
                default:
                    JOptionPane.showMessageDialog(null, "Invalid choice. Please try again.");
            }
        }
    }

    private static void guiMode() {
        // Create and set up the window.
        JFrame frame = new JFrame("Library Management System");
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setSize(600, 400); // Increase window size
        frame.setFont(new Font("Arial", Font.PLAIN, 14));

        // Create a panel that uses GridBagLayout.
        JPanel panel = new JPanel(new GridBagLayout());
        GridBagConstraints gbc = new GridBagConstraints();

        // Create and add components
        JButton addBookButton = new JButton("Add Book");
        JButton removeBookButton = new JButton("Remove Book");
        JButton searchBookButton = new JButton("Search Book");
        JButton listAllBooksButton = new JButton("List All Books");
        JButton borrowBookButton = new JButton("Borrow Book");
        JButton returnBookButton = new JButton("Return Book");

        // Add title label
        JLabel titleLabel = new JLabel("Library Management System");
        titleLabel.setFont(new Font("Arial", Font.BOLD, 20));
        titleLabel.setHorizontalAlignment(JLabel.CENTER);
        gbc.gridx = 0;
        gbc.gridy = 0;
        gbc.gridwidth = 2; // Span 2 columns
        gbc.fill = GridBagConstraints.HORIZONTAL;
        panel.add(titleLabel, gbc);

        // Add buttons
        gbc.gridy = 1;
        gbc.gridwidth = 1; // Reset to 1 column
        gbc.fill = GridBagConstraints.NONE;
        gbc.insets = new Insets(10, 0, 10, 0); // Add some space between buttons
        panel.add(addBookButton, gbc);
        gbc.gridy = 2;
        panel.add(removeBookButton, gbc);
        gbc.gridy = 3;
        panel.add(searchBookButton, gbc);
        gbc.gridy = 4;
        panel.add(listAllBooksButton, gbc);
        gbc.gridy = 5;
        panel.add(borrowBookButton, gbc);
        gbc.gridy = 6;
        panel.add(returnBookButton, gbc);

        // Add action listeners
        addBookButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                addBook();
            }
        });

        removeBookButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                removeBook();
            }
        });

        searchBookButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                searchBook();
            }
        });

        listAllBooksButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                listAllBooks();
            }
        });

        borrowBookButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                borrowBook();
            }
        });

        returnBookButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                returnBook();
            }
        });

        // Add the panel to the frame
        frame.add(panel);

        // Display the window.
        frame.pack();
        frame.setLocationRelativeTo(null); // Center the window
        frame.setVisible(true);
    }

    private static void addBook() {
        String title = JOptionPane.showInputDialog("Enter book title:");
        String author = JOptionPane.showInputDialog("Enter author name:");
        String isbn = JOptionPane.showInputDialog("Enter ISBN:");
        library.addBook(new Book(title, author, isbn));
        JOptionPane.showMessageDialog(null, "Book added successfully.");
    }

    private static void removeBook() {
        String isbn = JOptionPane.showInputDialog("Enter ISBN of the book to remove:");
        library.removeBook(isbn);
        JOptionPane.showMessageDialog(null, "Book removed successfully.");
    }

    private static void searchBook() {
        String isbn = JOptionPane.showInputDialog("Enter ISBN of the book to search:");
        Book book = library.searchBook(isbn);
        if (book != null) {
            JOptionPane.showMessageDialog(null, "Book found: " + book.getTitle() + " by " + book.getAuthor());
        } else {
            JOptionPane.showMessageDialog(null, "Book not found.");
        }
    }

    private static void listAllBooks() {
        List<Book> allBooks = library.getAllBooks();
        StringBuilder bookList = new StringBuilder("All Books:\n");
        for (Book book : allBooks) {
            bookList.append(book.getTitle()).append(" by ").append(book.getAuthor()).append("\n");
        }
        JOptionPane.showMessageDialog(null, bookList.toString());
    }

    private static void borrowBook() {
        String isbn = JOptionPane.showInputDialog("Enter ISBN of the book to borrow:");
        String borrowerName = JOptionPane.showInputDialog("Enter your name:");
        library.borrowBook(isbn, borrowerName);
        JOptionPane.showMessageDialog(null, "Book borrowed successfully.");
    }

    private static void returnBook() {
        String isbn = JOptionPane.showInputDialog("Enter ISBN of the book to return:");
        library.returnBook(isbn);
        JOptionPane.showMessageDialog(null, "Book returned successfully.");
    }

    // Method to add predefined books to the library
    private static void addPredefinedBooks(Library library) {
        library.addBook(new Book("The Catcher in the Rye", "J.D. Salinger", "1234"));
        library.addBook(new Book("To Kill a Mockingbird", "Harper Lee", "5678"));
        library.addBook(new Book("1984", "George Orwell", "8910"));
        library.addBook(new Book("The Great Gatsby", "F. Scott Fitzgerald", "1112"));
        library.addBook(new Book("Pride and Prejudice", "Jane Austen", "43212"));
    }
}

class Book {
    private String title;
    private String author;
    private String isbn;
    private String borrower;
    private boolean isAvailable;

    public Book(String title, String author, String isbn) {
        this.title = title;
        this.author = author;
        this.isbn = isbn;
        this.isAvailable = true;
    }

    // Getters and setters
    public String getTitle() {
        return title;
    }

    public String getAuthor() {
        return author;
    }

    public String getIsbn() {
        return isbn;
    }

    public String getBorrower() {
        return borrower;
    }

    public void setBorrower(String borrower) {
        this.borrower = borrower;
    }

    public boolean isAvailable() {
        return isAvailable;
    }

    public void setAvailable(boolean available) {
        isAvailable = available;
    }
}

class Library {
    private List<Book> books;

    public Library() {
        books = new ArrayList<>();
    }

    public void addBook(Book book) {
        books.add(book);
    }

    public void removeBook(String isbn) {
        books.removeIf(book -> book.getIsbn().equals(isbn));
    }

    public Book searchBook(String isbn) {
        for (Book book : books) {
            if (book.getIsbn().equals(isbn)) {
                return book;
            }
        }
        return null;
    }

    public List<Book> getAllBooks() {
        return books;
    }

    public void borrowBook(String isbn, String borrowerName) {
        Book book = searchBook(isbn);
        if (book != null && book.isAvailable()) {
            book.setAvailable(false);
            book.setBorrower(borrowerName);
        }
    }

    public void returnBook(String isbn) {
        Book book = searchBook(isbn);
        if (book != null && !book.isAvailable()) {
            book.setAvailable(true);
            book.setBorrower(null);
        }
    }
}
